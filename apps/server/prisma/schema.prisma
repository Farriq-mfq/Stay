generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// master data
model siswa {
  id               Int               @id @default(autoincrement())
  notelp           String?           @unique @db.VarChar()
  name             String            @db.VarChar()
  nisn             String            @unique @db.VarChar()
  password         String
  refreshToken     String?
  rombel           String
  nis              String?           @unique @db.VarChar()
  rfid_token       String?           @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  presences        presences[]
  telegram_account telegram_account?
  notifications    notifications[]

  @@index([nis, nisn])
}

enum RoleUser {
  admin
  user
}

model users {
  id                 Int      @id @default(autoincrement())
  name               String
  username           String   @unique @db.VarChar(255)
  password           String   @db.VarChar(255)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  refreshToken       String?  @db.Text
  role               RoleUser @default(user)
  telegram_accountId Int?     @unique
}

// fitur data
enum GatewayRole {
  presence // insert to presence table
  register // register the rfid to the database
}

model gateways {
  id                  Int                @id @default(autoincrement())
  token               String             @unique @db.VarChar()
  ip                  String             @unique @db.VarChar()
  location            String
  name                String
  role                GatewayRole
  status              Boolean            @default(true)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  presences           presences[]
  presence_sessions   presence_sessions? @relation(fields: [presence_sessionsId], references: [id])
  presence_sessionsId Int?

  @@index([ip, token])
}

// only role presences are allowed
enum SessionRoleType {
  PEGAWAI
  ROLE
}

model presence_sessions {
  id          Int         @id @default(autoincrement())
  name        String
  qrcode      String      @unique @default(cuid())
  allow_twice Boolean?    @default(false)
  start_time  String?
  end_time    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  gateways    gateways[]
  presences   presences[]
  // change to group
  rombel      String?
  // plan by allowed_role
  // role_type SessionRoleType?

  @@index([qrcode])
}

enum PresenceMethod {
  card
  qrcode
  other
}

model presences {
  id                  Int                @id @default(autoincrement())
  siswa               siswa              @relation(fields: [siswaId], references: [id], onDelete: Cascade)
  siswaId             Int
  gateway             gateways?          @relation(fields: [gatewaysId], references: [id], onDelete: SetNull)
  gatewaysId          Int?
  session             presence_sessions? @relation(fields: [presence_sessionsId], references: [id], onDelete: SetNull)
  enter_time          DateTime
  exit_time           DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  presence_sessionsId Int?
  method              PresenceMethod     @default(other)

  @@index([siswaId, gatewaysId, presence_sessionsId])
}

model telegram_account {
  id        Int      @id @default(autoincrement())
  username  String
  name      String
  chat_id   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  siswa     siswa?   @relation(fields: [siswaId], references: [id])
  siswaId   Int?     @unique

  @@index([siswaId, chat_id])
}

// plan for firebase notifications
model notifications {
  id        Int      @id @default(autoincrement())
  title     String
  message   String   @db.Text
  siswaId   Int
  status    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  siswa     siswa    @relation(fields: [siswaId], references: [id], onDelete: Cascade)
}

// whatsapp session
enum whatsapp_status {
  CONNECTED
  DISCONNECTED
  INITIALIZED
}

model whatsapp_sessions {
  id        Int             @id @default(autoincrement())
  name      String          @db.VarChar(255)
  token     String?         @db.VarChar(255)
  status    whatsapp_status @default(INITIALIZED)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}
