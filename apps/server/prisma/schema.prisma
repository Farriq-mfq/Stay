generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// master data
model siswa {
  id                Int               @id @default(autoincrement())
  notelp            String?           @unique @db.VarChar()
  name              String            @db.VarChar()
  nisn              String            @unique @db.VarChar()
  password          String
  refreshToken      String?
  rombel            String
  nis               String?           @unique @db.VarChar()
  rfid_token        String?           @unique
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  presences         presences[]
  // TODO: remove field telegram
  telegram_account  telegram_account?
  notifications     notifications[]
  profile_picture   String?
  picture_public_id String?

  @@index([nis, nisn])
}

// employees
model pegawai {
  id                        Int                 @id @default(autoincrement())
  name                      String              @db.VarChar()
  username                  String              @unique @db.VarChar() // di isi dengan NIP 
  password                  String
  refreshToken              String?
  rfid_token                String?             @unique
  position                  String?
  group                     String
  sign_picture              String? // gambar tanda tangan
  sign_picture_public_id    String?
  profile_picture           String? // profile
  profile_picture_public_id String?
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  presences                 presences_pegawai[]
}

enum RoleUser {
  admin
  user
}

// users system

model users {
  id                 Int      @id @default(autoincrement())
  name               String
  username           String   @unique @db.VarChar(255)
  password           String   @db.VarChar(255)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  refreshToken       String?  @db.Text
  role               RoleUser @default(user)
  telegram_accountId Int?     @unique
}

// fitur data
enum GatewayRole {
  presence // insert to presence table
  register // register the rfid to the database
}

model gateways {
  id                  Int                 @id @default(autoincrement())
  token               String              @unique @db.VarChar()
  ip                  String              @unique @db.VarChar()
  location            String
  name                String
  role                GatewayRole
  status              Boolean             @default(true)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  presences           presences[]
  presence_sessions   presence_sessions?  @relation(fields: [presence_sessionsId], references: [id])
  presence_sessionsId Int?
  presences_pegawai   presences_pegawai[]

  @@index([ip, token])
}

// only role presences are allowed
enum SessionRoleType {
  PEGAWAI
  SISWA
}

model presence_sessions {
  id                Int                 @id @default(autoincrement())
  name              String
  qrcode            String              @unique @default(cuid())
  allow_twice       Boolean?            @default(false)
  start_time        String?
  end_time          String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  gateways          gateways[]
  presences         presences[]
  // change to group
  // rombel            String?
  group             String?
  // plan by allowed_role
  session_role_type SessionRoleType
  presences_pegawai presences_pegawai[]

  meeting_session    meeting_sessions? @relation(fields: [meeting_sessionsId], references: [id])
  meeting_sessionsId Int?              @unique

  @@index([qrcode])
}

enum PresenceMethod {
  card
  qrcode
  manual
  other
}

model presences {
  id                  Int                @id @default(autoincrement())
  siswa               siswa              @relation(fields: [siswaId], references: [id], onDelete: Cascade)
  siswaId             Int
  gateway             gateways?          @relation(fields: [gatewaysId], references: [id], onDelete: SetNull)
  gatewaysId          Int?
  session             presence_sessions? @relation(fields: [presence_sessionsId], references: [id], onDelete: SetNull)
  enter_time          DateTime
  exit_time           DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  presence_sessionsId Int?
  method              PresenceMethod     @default(other)

  @@index([siswaId, gatewaysId, presence_sessionsId])
}

model presences_pegawai {
  id                  Int                @id @default(autoincrement())
  pegawai             pegawai            @relation(fields: [pegawaiId], references: [id], onDelete: Cascade)
  pegawaiId           Int
  gateway             gateways?          @relation(fields: [gatewaysId], references: [id], onDelete: SetNull)
  gatewaysId          Int?
  session             presence_sessions? @relation(fields: [presence_sessionsId], references: [id], onDelete: SetNull)
  enter_time          DateTime
  exit_time           DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  presence_sessionsId Int?
  method              PresenceMethod     @default(other)
  // add meeting session field
  meeting_session     meeting_sessions?  @relation(fields: [meeting_sessionsId], references: [id], onDelete: SetNull)
  meeting_sessionsId  Int?

  @@index([pegawaiId, gatewaysId, presence_sessionsId])
}

// TODO: remove model telegram_account
model telegram_account {
  id        Int      @id @default(autoincrement())
  username  String
  name      String
  chat_id   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  siswa     siswa?   @relation(fields: [siswaId], references: [id])
  siswaId   Int?     @unique

  @@index([siswaId, chat_id])
}

// TODO: plan for firebase notifications
model notifications {
  id        Int      @id @default(autoincrement())
  title     String
  message   String   @db.Text
  siswaId   Int
  status    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  siswa     siswa    @relation(fields: [siswaId], references: [id], onDelete: Cascade)
}

model meeting_sessions {
  id                Int                 @id @default(autoincrement())
  name              String
  date              DateTime
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  presence_sessions presence_sessions?
  presences_pegawai presences_pegawai[]
}

// // TODO: remove whatsapp session table
// // whatsapp session
// enum whatsapp_status {
//   CONNECTED
//   DISCONNECTED
//   INITIALIZED
// }

// model whatsapp_sessions {
//   id        Int             @id @default(autoincrement())
//   name      String          @db.VarChar(255)
//   token     String?         @db.VarChar(255)
//   status    whatsapp_status @default(INITIALIZED)
//   createdAt DateTime        @default(now())
//   updatedAt DateTime        @updatedAt
// }
