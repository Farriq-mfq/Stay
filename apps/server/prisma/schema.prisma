generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// master data
model siswa {
  id                Int               @id @default(autoincrement())
  notelp            String?           @unique @db.VarChar()
  name              String            @db.VarChar()
  nisn              String            @unique @db.VarChar()
  password          String
  refreshToken      String?
  rombel            String
  nis               String?           @unique @db.VarChar()
  rfid_token        String?           @unique
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  presences         presences[]
  // TODO: remove field telegram
  telegram_account  telegram_account?
  notifications     notifications[]
  profile_picture   String?
  picture_public_id String?
  accountId         Int?              @unique
  account           account?          @relation(fields: [accountId], references: [id])

  @@index([nis, nisn])
}

// employees
model pegawai {
  id                        Int                 @id @default(autoincrement())
  name                      String              @db.VarChar()
  username                  String              @unique @db.VarChar() // di isi dengan NIP 
  password                  String
  refreshToken              String?
  rfid_token                String?             @unique
  position                  String?
  group                     String
  sign_picture              String? // gambar tanda tangan
  sign_picture_public_id    String?
  profile_picture           String? // profile
  profile_picture_public_id String?
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  presences                 presences_pegawai[]
  accountId                 Int?                @unique
  account                   account?            @relation(fields: [accountId], references: [id])
  schedules                 schedules[]
}

// enum RoleUser {
//   admin
//   user
// }

// users system

model users {
  id                 Int      @id @default(autoincrement())
  name               String
  username           String   @unique @db.VarChar(255)
  password           String   @db.VarChar(255)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  refreshToken       String?  @db.Text
  // role               RoleUser @default(user)
  telegram_accountId Int?     @unique
  accountId          Int?     @unique
  account            account? @relation(fields: [accountId], references: [id])
  roles              roles    @relation(fields: [rolesId], references: [id])
  rolesId            Int
}

// fitur data
enum GatewayRole {
  presence // insert to presence table
  register // register the rfid to the database
}

model gateways {
  id                  Int                 @id @default(autoincrement())
  token               String              @unique @db.VarChar()
  ip                  String              @unique @db.VarChar()
  location            String
  name                String
  role                GatewayRole
  status              Boolean             @default(true)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  presences           presences[]
  presence_sessions   presence_sessions?  @relation(fields: [presence_sessionsId], references: [id])
  presence_sessionsId Int?
  presences_pegawai   presences_pegawai[]

  @@index([ip, token])
}

// only role presences are allowed
enum SessionRoleType {
  PEGAWAI
  SISWA
}

model presence_sessions {
  id          Int         @id @default(autoincrement())
  name        String
  qrcode      String      @unique @default(cuid())
  allow_twice Boolean?    @default(false)
  start_time  String?
  end_time    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  gateways    gateways[]
  presences   presences[]
  // change to group
  // rombel            String?
  group       String?

  session_role_type SessionRoleType
  presences_pegawai presences_pegawai[]

  meeting_session               meeting_sessions?              @relation(fields: [meeting_sessionsId], references: [id])
  meeting_sessionsId            Int?                           @unique
  presence_sessions_by_location presence_sessions_by_location?
  auto_read_presence            Boolean?                       @default(false) // auto read presence by location

  @@index([qrcode])
}

enum PresenceMethod {
  card
  qrcode
  manual
  location
  other
}

model presences {
  id                  Int                @id @default(autoincrement())
  siswa               siswa              @relation(fields: [siswaId], references: [id], onDelete: Cascade)
  siswaId             Int
  gateway             gateways?          @relation(fields: [gatewaysId], references: [id], onDelete: SetNull)
  gatewaysId          Int?
  session             presence_sessions? @relation(fields: [presence_sessionsId], references: [id], onDelete: SetNull)
  enter_time          DateTime
  exit_time           DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  presence_sessionsId Int?
  method              PresenceMethod     @default(other)

  @@index([siswaId, gatewaysId, presence_sessionsId])
}

model presences_pegawai {
  id                  Int                @id @default(autoincrement())
  pegawai             pegawai            @relation(fields: [pegawaiId], references: [id], onDelete: Cascade)
  pegawaiId           Int
  gateway             gateways?          @relation(fields: [gatewaysId], references: [id], onDelete: SetNull)
  gatewaysId          Int?
  session             presence_sessions? @relation(fields: [presence_sessionsId], references: [id], onDelete: SetNull)
  enter_time          DateTime
  exit_time           DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  presence_sessionsId Int?
  method              PresenceMethod     @default(other)
  // add meeting session field
  meeting_session     meeting_sessions?  @relation(fields: [meeting_sessionsId], references: [id], onDelete: SetNull)
  meeting_sessionsId  Int?

  @@index([pegawaiId, gatewaysId, presence_sessionsId])
}

// TODO: remove model telegram_account
model telegram_account {
  id        Int      @id @default(autoincrement())
  username  String
  name      String
  chat_id   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  siswa     siswa?   @relation(fields: [siswaId], references: [id])
  siswaId   Int?     @unique

  @@index([siswaId, chat_id])
}

// TODO: plan for firebase notifications
model notifications {
  id        Int      @id @default(autoincrement())
  title     String
  message   String   @db.Text
  siswaId   Int
  status    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  siswa     siswa    @relation(fields: [siswaId], references: [id], onDelete: Cascade)
}

model meeting_sessions {
  id                Int                 @id @default(autoincrement())
  name              String
  date              DateTime
  location          String
  time              String
  agenda            String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  presence_sessions presence_sessions?
  presences_pegawai presences_pegawai[]
}

// // TODO: remove whatsapp session table
// // whatsapp session
// enum whatsapp_status {
//   CONNECTED
//   DISCONNECTED
//   INITIALIZED
// }

// model whatsapp_sessions {
//   id        Int             @id @default(autoincrement())
//   name      String          @db.VarChar(255)
//   token     String?         @db.VarChar(255)
//   status    whatsapp_status @default(INITIALIZED)
//   createdAt DateTime        @default(now())
//   updatedAt DateTime        @updatedAt
// }

// polymorphism payment info
// info payment yang digunakan untuk user,admin,siswa bahkan pegawai
enum AccountableType {
  USER // ini untuk table users
  SISWA // ini untuk table siswa 
  PEGAWAI // ini untuk table pegawai
}

model account {
  id              Int             @id @default(autoincrement())
  name            String
  accountNumber   String          @unique
  balance         Float           @default(0)
  accountableId   Int
  accountableType AccountableType
  pin             String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  qrCode String? @unique

  asFromtransactions transactions[] @relation("asFromtransactions")
  asTotransactions   transactions[] @relation("asTotransactions")
  siswa              siswa?
  pegawai            pegawai?
  users              users?

  @@unique([accountableId, accountableType])
  @@index([accountNumber, accountableId, accountableType])
}

enum TransactionFlow {
  UP
  DOWN
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  TRANSFER
  PAYMENT
  AUTODEBET
}

enum TransactionStatus {
  PENDING
  FAILED
  SUCCESS
}

// not currently
// enum PaymentMethod {
//   BALANCE
//   BANK
//   CASH
// }

model transactions {
  id                  Int                   @id @default(autoincrement())
  title               String? // generate by system ex : deposit from user 1 to user 2
  flow                TransactionFlow
  amount              Float
  type                TransactionType       @default(PAYMENT)
  status              TransactionStatus     @default(PENDING)
  code                String
  note                String?
  payment_method      String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  detail_transactions detail_transactions[]
  from                account?              @relation("asFromtransactions", fields: [fromAccountId], references: [id])
  to                  account?              @relation("asTotransactions", fields: [toAccountId], references: [id])
  fromAccountId       Int?
  toAccountId         Int?
  fromAccountType     AccountableType?
  toAccountType       AccountableType?

  @@index([code])
}

model detail_transactions {
  id            Int          @id @default(autoincrement())
  transaction   transactions @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId Int
  name          String
  price         Float
  quantity      Int
  subtotal      Float
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model roles {
  id          Int                @id @default(autoincrement())
  name        String             @unique
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  permissions role_permissions[]
  users       users[]
}

model permissions {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  role_permissions role_permissions[]

  @@index([name])
}

model role_permissions {
  id           Int         @id @default(autoincrement())
  role         roles       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       Int
  permission   permissions @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

// connected client socket io
model connected_clients {
  id        Int      @id @default(autoincrement())
  clientId  String   @unique
  socketId  String
  userAgent String
  ip        String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// presence by location
model presence_sessions_by_location {
  id                  Int               @id @default(autoincrement())
  latitude            Float
  longitude           Float
  distance            Float
  presence_sessions   presence_sessions @relation(fields: [presence_sessionsId], references: [id], onDelete: Cascade)
  presence_sessionsId Int               @unique
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@index([latitude, longitude])
}

// academic 
model subjects {
  id        Int         @id @default(autoincrement())
  name      String
  code      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  schedules schedules[]
}

model schedules {
  id          Int      @id @default(autoincrement())
  subjects    subjects @relation(fields: [subjectsId], references: [id], onDelete: Restrict)
  subjectsId  Int
  pegawai     pegawai  @relation(fields: [pegawaiId], references: [id], onDelete: Cascade)
  pegawaiId   Int
  rombel      String
  day_of_week Int // 1-7
  startTime   String
  endTime     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// // journal employee and teaching
// model journal_employee {
//   id          Int      @id @default(autoincrement())
//   pegawai     pegawai  @relation(fields: [pegawaiId], references: [id], onDelete: Cascade)
//   pegawaiId   Int
//   description String   @db.Text
//   date        DateTime
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

// model journal_teaching {
//   id          Int      @id @default(autoincrement())
//   pegawai     pegawai  @relation(fields: [pegawaiId], references: [id], onDelete: Cascade)
//   pegawaiId   Int
//   description String   @db.Text // isi uraian kegiatan
//   rombel      String // rombel yang diajar
//   start_time  String // waktu mulai
//   end_time    String // waktu selesai
//   date        DateTime
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

// enum ClassAttendanceStatus {
//   HADIR
//   SAKIT
//   IZIN
//   ALPHA
// }

// // class attendance
// // absen ini di lakukan oleh pegawai (guru)
// model class_attendance {
//   id        Int                   @id @default(autoincrement())
//   siswa     siswa                 @relation(fields: [siswaId], references: [id], onDelete: Cascade)
//   siswaId   Int
//   status    ClassAttendanceStatus
//   date      DateTime
//   createdAt DateTime              @default(now()) // tanggal absen
//   updatedAt DateTime              @updatedAt
// }
